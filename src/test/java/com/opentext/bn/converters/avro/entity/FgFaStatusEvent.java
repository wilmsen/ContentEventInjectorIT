/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FgFaStatusEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8510832601542472773L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FgFaStatusEvent\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"ackCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ackDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"ackDocUuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"calendarRulesetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"cycleExpireDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"cycleMsg\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cycleMsgDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"cycleMsgNote\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cycleNo\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"dateDelivered\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"delinquentFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"doNotTrackFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"faDocTransactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"faRulesetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"faStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fgUuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fileId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hoursToDelinquent\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"icUuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastModifiedDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"numDocAccepted\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocError\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocReject\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numOfCycles\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numOfDocs\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"readyToSend\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"resolvedAckCodes\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FgFaStatusEvent> ENCODER =
      new BinaryMessageEncoder<FgFaStatusEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FgFaStatusEvent> DECODER =
      new BinaryMessageDecoder<FgFaStatusEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FgFaStatusEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FgFaStatusEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FgFaStatusEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FgFaStatusEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FgFaStatusEvent from a ByteBuffer. */
  public static FgFaStatusEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String ackCode;
   private java.lang.Long ackDate;
   private java.lang.String ackDocUuid;
   private java.lang.String calendarRulesetId;
   private java.lang.Long createdDate;
   private java.lang.Long cycleExpireDate;
   private java.lang.String cycleMsg;
   private java.lang.Long cycleMsgDate;
   private java.lang.String cycleMsgNote;
   private java.lang.Integer cycleNo;
   private java.lang.Long dateDelivered;
   private java.lang.String delinquentFlag;
   private java.lang.String doNotTrackFlag;
   private java.lang.String eventId;
   private java.lang.Long eventTimestamp;
   private java.lang.String faDocTransactionId;
   private java.lang.String faRulesetId;
   private java.lang.String faStatus;
   private java.lang.String fgUuid;
   private java.lang.String fileId;
   private java.lang.String hoursToDelinquent;
   private java.lang.String icUuid;
   private java.lang.Long lastModifiedDate;
   private java.lang.Integer numDocAccepted;
   private java.lang.Integer numDocError;
   private java.lang.Integer numDocReceived;
   private java.lang.Integer numDocReject;
   private java.lang.Integer numOfCycles;
   private java.lang.Integer numOfDocs;
   private java.lang.String readyToSend;
   private java.lang.String resolvedAckCodes;
   private java.lang.String transactionId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FgFaStatusEvent() {}

  /**
   * All-args constructor.
   * @param ackCode The new value for ackCode
   * @param ackDate The new value for ackDate
   * @param ackDocUuid The new value for ackDocUuid
   * @param calendarRulesetId The new value for calendarRulesetId
   * @param createdDate The new value for createdDate
   * @param cycleExpireDate The new value for cycleExpireDate
   * @param cycleMsg The new value for cycleMsg
   * @param cycleMsgDate The new value for cycleMsgDate
   * @param cycleMsgNote The new value for cycleMsgNote
   * @param cycleNo The new value for cycleNo
   * @param dateDelivered The new value for dateDelivered
   * @param delinquentFlag The new value for delinquentFlag
   * @param doNotTrackFlag The new value for doNotTrackFlag
   * @param eventId The new value for eventId
   * @param eventTimestamp The new value for eventTimestamp
   * @param faDocTransactionId The new value for faDocTransactionId
   * @param faRulesetId The new value for faRulesetId
   * @param faStatus The new value for faStatus
   * @param fgUuid The new value for fgUuid
   * @param fileId The new value for fileId
   * @param hoursToDelinquent The new value for hoursToDelinquent
   * @param icUuid The new value for icUuid
   * @param lastModifiedDate The new value for lastModifiedDate
   * @param numDocAccepted The new value for numDocAccepted
   * @param numDocError The new value for numDocError
   * @param numDocReceived The new value for numDocReceived
   * @param numDocReject The new value for numDocReject
   * @param numOfCycles The new value for numOfCycles
   * @param numOfDocs The new value for numOfDocs
   * @param readyToSend The new value for readyToSend
   * @param resolvedAckCodes The new value for resolvedAckCodes
   * @param transactionId The new value for transactionId
   */
  public FgFaStatusEvent(java.lang.String ackCode, java.lang.Long ackDate, java.lang.String ackDocUuid, java.lang.String calendarRulesetId, java.lang.Long createdDate, java.lang.Long cycleExpireDate, java.lang.String cycleMsg, java.lang.Long cycleMsgDate, java.lang.String cycleMsgNote, java.lang.Integer cycleNo, java.lang.Long dateDelivered, java.lang.String delinquentFlag, java.lang.String doNotTrackFlag, java.lang.String eventId, java.lang.Long eventTimestamp, java.lang.String faDocTransactionId, java.lang.String faRulesetId, java.lang.String faStatus, java.lang.String fgUuid, java.lang.String fileId, java.lang.String hoursToDelinquent, java.lang.String icUuid, java.lang.Long lastModifiedDate, java.lang.Integer numDocAccepted, java.lang.Integer numDocError, java.lang.Integer numDocReceived, java.lang.Integer numDocReject, java.lang.Integer numOfCycles, java.lang.Integer numOfDocs, java.lang.String readyToSend, java.lang.String resolvedAckCodes, java.lang.String transactionId) {
    this.ackCode = ackCode;
    this.ackDate = ackDate;
    this.ackDocUuid = ackDocUuid;
    this.calendarRulesetId = calendarRulesetId;
    this.createdDate = createdDate;
    this.cycleExpireDate = cycleExpireDate;
    this.cycleMsg = cycleMsg;
    this.cycleMsgDate = cycleMsgDate;
    this.cycleMsgNote = cycleMsgNote;
    this.cycleNo = cycleNo;
    this.dateDelivered = dateDelivered;
    this.delinquentFlag = delinquentFlag;
    this.doNotTrackFlag = doNotTrackFlag;
    this.eventId = eventId;
    this.eventTimestamp = eventTimestamp;
    this.faDocTransactionId = faDocTransactionId;
    this.faRulesetId = faRulesetId;
    this.faStatus = faStatus;
    this.fgUuid = fgUuid;
    this.fileId = fileId;
    this.hoursToDelinquent = hoursToDelinquent;
    this.icUuid = icUuid;
    this.lastModifiedDate = lastModifiedDate;
    this.numDocAccepted = numDocAccepted;
    this.numDocError = numDocError;
    this.numDocReceived = numDocReceived;
    this.numDocReject = numDocReject;
    this.numOfCycles = numOfCycles;
    this.numOfDocs = numOfDocs;
    this.readyToSend = readyToSend;
    this.resolvedAckCodes = resolvedAckCodes;
    this.transactionId = transactionId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ackCode;
    case 1: return ackDate;
    case 2: return ackDocUuid;
    case 3: return calendarRulesetId;
    case 4: return createdDate;
    case 5: return cycleExpireDate;
    case 6: return cycleMsg;
    case 7: return cycleMsgDate;
    case 8: return cycleMsgNote;
    case 9: return cycleNo;
    case 10: return dateDelivered;
    case 11: return delinquentFlag;
    case 12: return doNotTrackFlag;
    case 13: return eventId;
    case 14: return eventTimestamp;
    case 15: return faDocTransactionId;
    case 16: return faRulesetId;
    case 17: return faStatus;
    case 18: return fgUuid;
    case 19: return fileId;
    case 20: return hoursToDelinquent;
    case 21: return icUuid;
    case 22: return lastModifiedDate;
    case 23: return numDocAccepted;
    case 24: return numDocError;
    case 25: return numDocReceived;
    case 26: return numDocReject;
    case 27: return numOfCycles;
    case 28: return numOfDocs;
    case 29: return readyToSend;
    case 30: return resolvedAckCodes;
    case 31: return transactionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ackCode = (java.lang.String)value$; break;
    case 1: ackDate = (java.lang.Long)value$; break;
    case 2: ackDocUuid = (java.lang.String)value$; break;
    case 3: calendarRulesetId = (java.lang.String)value$; break;
    case 4: createdDate = (java.lang.Long)value$; break;
    case 5: cycleExpireDate = (java.lang.Long)value$; break;
    case 6: cycleMsg = (java.lang.String)value$; break;
    case 7: cycleMsgDate = (java.lang.Long)value$; break;
    case 8: cycleMsgNote = (java.lang.String)value$; break;
    case 9: cycleNo = (java.lang.Integer)value$; break;
    case 10: dateDelivered = (java.lang.Long)value$; break;
    case 11: delinquentFlag = (java.lang.String)value$; break;
    case 12: doNotTrackFlag = (java.lang.String)value$; break;
    case 13: eventId = (java.lang.String)value$; break;
    case 14: eventTimestamp = (java.lang.Long)value$; break;
    case 15: faDocTransactionId = (java.lang.String)value$; break;
    case 16: faRulesetId = (java.lang.String)value$; break;
    case 17: faStatus = (java.lang.String)value$; break;
    case 18: fgUuid = (java.lang.String)value$; break;
    case 19: fileId = (java.lang.String)value$; break;
    case 20: hoursToDelinquent = (java.lang.String)value$; break;
    case 21: icUuid = (java.lang.String)value$; break;
    case 22: lastModifiedDate = (java.lang.Long)value$; break;
    case 23: numDocAccepted = (java.lang.Integer)value$; break;
    case 24: numDocError = (java.lang.Integer)value$; break;
    case 25: numDocReceived = (java.lang.Integer)value$; break;
    case 26: numDocReject = (java.lang.Integer)value$; break;
    case 27: numOfCycles = (java.lang.Integer)value$; break;
    case 28: numOfDocs = (java.lang.Integer)value$; break;
    case 29: readyToSend = (java.lang.String)value$; break;
    case 30: resolvedAckCodes = (java.lang.String)value$; break;
    case 31: transactionId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ackCode' field.
   * @return The value of the 'ackCode' field.
   */
  public java.lang.String getAckCode() {
    return ackCode;
  }


  /**
   * Gets the value of the 'ackDate' field.
   * @return The value of the 'ackDate' field.
   */
  public java.lang.Long getAckDate() {
    return ackDate;
  }


  /**
   * Gets the value of the 'ackDocUuid' field.
   * @return The value of the 'ackDocUuid' field.
   */
  public java.lang.String getAckDocUuid() {
    return ackDocUuid;
  }


  /**
   * Gets the value of the 'calendarRulesetId' field.
   * @return The value of the 'calendarRulesetId' field.
   */
  public java.lang.String getCalendarRulesetId() {
    return calendarRulesetId;
  }


  /**
   * Gets the value of the 'createdDate' field.
   * @return The value of the 'createdDate' field.
   */
  public java.lang.Long getCreatedDate() {
    return createdDate;
  }


  /**
   * Gets the value of the 'cycleExpireDate' field.
   * @return The value of the 'cycleExpireDate' field.
   */
  public java.lang.Long getCycleExpireDate() {
    return cycleExpireDate;
  }


  /**
   * Gets the value of the 'cycleMsg' field.
   * @return The value of the 'cycleMsg' field.
   */
  public java.lang.String getCycleMsg() {
    return cycleMsg;
  }


  /**
   * Gets the value of the 'cycleMsgDate' field.
   * @return The value of the 'cycleMsgDate' field.
   */
  public java.lang.Long getCycleMsgDate() {
    return cycleMsgDate;
  }


  /**
   * Gets the value of the 'cycleMsgNote' field.
   * @return The value of the 'cycleMsgNote' field.
   */
  public java.lang.String getCycleMsgNote() {
    return cycleMsgNote;
  }


  /**
   * Gets the value of the 'cycleNo' field.
   * @return The value of the 'cycleNo' field.
   */
  public java.lang.Integer getCycleNo() {
    return cycleNo;
  }


  /**
   * Gets the value of the 'dateDelivered' field.
   * @return The value of the 'dateDelivered' field.
   */
  public java.lang.Long getDateDelivered() {
    return dateDelivered;
  }


  /**
   * Gets the value of the 'delinquentFlag' field.
   * @return The value of the 'delinquentFlag' field.
   */
  public java.lang.String getDelinquentFlag() {
    return delinquentFlag;
  }


  /**
   * Gets the value of the 'doNotTrackFlag' field.
   * @return The value of the 'doNotTrackFlag' field.
   */
  public java.lang.String getDoNotTrackFlag() {
    return doNotTrackFlag;
  }


  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public java.lang.Long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Gets the value of the 'faDocTransactionId' field.
   * @return The value of the 'faDocTransactionId' field.
   */
  public java.lang.String getFaDocTransactionId() {
    return faDocTransactionId;
  }


  /**
   * Gets the value of the 'faRulesetId' field.
   * @return The value of the 'faRulesetId' field.
   */
  public java.lang.String getFaRulesetId() {
    return faRulesetId;
  }


  /**
   * Gets the value of the 'faStatus' field.
   * @return The value of the 'faStatus' field.
   */
  public java.lang.String getFaStatus() {
    return faStatus;
  }


  /**
   * Gets the value of the 'fgUuid' field.
   * @return The value of the 'fgUuid' field.
   */
  public java.lang.String getFgUuid() {
    return fgUuid;
  }


  /**
   * Gets the value of the 'fileId' field.
   * @return The value of the 'fileId' field.
   */
  public java.lang.String getFileId() {
    return fileId;
  }


  /**
   * Gets the value of the 'hoursToDelinquent' field.
   * @return The value of the 'hoursToDelinquent' field.
   */
  public java.lang.String getHoursToDelinquent() {
    return hoursToDelinquent;
  }


  /**
   * Gets the value of the 'icUuid' field.
   * @return The value of the 'icUuid' field.
   */
  public java.lang.String getIcUuid() {
    return icUuid;
  }


  /**
   * Gets the value of the 'lastModifiedDate' field.
   * @return The value of the 'lastModifiedDate' field.
   */
  public java.lang.Long getLastModifiedDate() {
    return lastModifiedDate;
  }


  /**
   * Gets the value of the 'numDocAccepted' field.
   * @return The value of the 'numDocAccepted' field.
   */
  public java.lang.Integer getNumDocAccepted() {
    return numDocAccepted;
  }


  /**
   * Gets the value of the 'numDocError' field.
   * @return The value of the 'numDocError' field.
   */
  public java.lang.Integer getNumDocError() {
    return numDocError;
  }


  /**
   * Gets the value of the 'numDocReceived' field.
   * @return The value of the 'numDocReceived' field.
   */
  public java.lang.Integer getNumDocReceived() {
    return numDocReceived;
  }


  /**
   * Gets the value of the 'numDocReject' field.
   * @return The value of the 'numDocReject' field.
   */
  public java.lang.Integer getNumDocReject() {
    return numDocReject;
  }


  /**
   * Gets the value of the 'numOfCycles' field.
   * @return The value of the 'numOfCycles' field.
   */
  public java.lang.Integer getNumOfCycles() {
    return numOfCycles;
  }


  /**
   * Gets the value of the 'numOfDocs' field.
   * @return The value of the 'numOfDocs' field.
   */
  public java.lang.Integer getNumOfDocs() {
    return numOfDocs;
  }


  /**
   * Gets the value of the 'readyToSend' field.
   * @return The value of the 'readyToSend' field.
   */
  public java.lang.String getReadyToSend() {
    return readyToSend;
  }


  /**
   * Gets the value of the 'resolvedAckCodes' field.
   * @return The value of the 'resolvedAckCodes' field.
   */
  public java.lang.String getResolvedAckCodes() {
    return resolvedAckCodes;
  }


  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Creates a new FgFaStatusEvent RecordBuilder.
   * @return A new FgFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder();
  }

  /**
   * Creates a new FgFaStatusEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FgFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder other) {
    return new com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder(other);
  }

  /**
   * Creates a new FgFaStatusEvent RecordBuilder by copying an existing FgFaStatusEvent instance.
   * @param other The existing instance to copy.
   * @return A new FgFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.FgFaStatusEvent other) {
    return new com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder(other);
  }

  /**
   * RecordBuilder for FgFaStatusEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FgFaStatusEvent>
    implements org.apache.avro.data.RecordBuilder<FgFaStatusEvent> {

    private java.lang.String ackCode;
    private java.lang.Long ackDate;
    private java.lang.String ackDocUuid;
    private java.lang.String calendarRulesetId;
    private java.lang.Long createdDate;
    private java.lang.Long cycleExpireDate;
    private java.lang.String cycleMsg;
    private java.lang.Long cycleMsgDate;
    private java.lang.String cycleMsgNote;
    private java.lang.Integer cycleNo;
    private java.lang.Long dateDelivered;
    private java.lang.String delinquentFlag;
    private java.lang.String doNotTrackFlag;
    private java.lang.String eventId;
    private java.lang.Long eventTimestamp;
    private java.lang.String faDocTransactionId;
    private java.lang.String faRulesetId;
    private java.lang.String faStatus;
    private java.lang.String fgUuid;
    private java.lang.String fileId;
    private java.lang.String hoursToDelinquent;
    private java.lang.String icUuid;
    private java.lang.Long lastModifiedDate;
    private java.lang.Integer numDocAccepted;
    private java.lang.Integer numDocError;
    private java.lang.Integer numDocReceived;
    private java.lang.Integer numDocReject;
    private java.lang.Integer numOfCycles;
    private java.lang.Integer numOfDocs;
    private java.lang.String readyToSend;
    private java.lang.String resolvedAckCodes;
    private java.lang.String transactionId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ackCode)) {
        this.ackCode = data().deepCopy(fields()[0].schema(), other.ackCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ackDate)) {
        this.ackDate = data().deepCopy(fields()[1].schema(), other.ackDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ackDocUuid)) {
        this.ackDocUuid = data().deepCopy(fields()[2].schema(), other.ackDocUuid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.calendarRulesetId)) {
        this.calendarRulesetId = data().deepCopy(fields()[3].schema(), other.calendarRulesetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cycleExpireDate)) {
        this.cycleExpireDate = data().deepCopy(fields()[5].schema(), other.cycleExpireDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cycleMsg)) {
        this.cycleMsg = data().deepCopy(fields()[6].schema(), other.cycleMsg);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cycleMsgDate)) {
        this.cycleMsgDate = data().deepCopy(fields()[7].schema(), other.cycleMsgDate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cycleMsgNote)) {
        this.cycleMsgNote = data().deepCopy(fields()[8].schema(), other.cycleMsgNote);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cycleNo)) {
        this.cycleNo = data().deepCopy(fields()[9].schema(), other.cycleNo);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dateDelivered)) {
        this.dateDelivered = data().deepCopy(fields()[10].schema(), other.dateDelivered);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.delinquentFlag)) {
        this.delinquentFlag = data().deepCopy(fields()[11].schema(), other.delinquentFlag);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.doNotTrackFlag)) {
        this.doNotTrackFlag = data().deepCopy(fields()[12].schema(), other.doNotTrackFlag);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.eventId)) {
        this.eventId = data().deepCopy(fields()[13].schema(), other.eventId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[14].schema(), other.eventTimestamp);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.faDocTransactionId)) {
        this.faDocTransactionId = data().deepCopy(fields()[15].schema(), other.faDocTransactionId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.faRulesetId)) {
        this.faRulesetId = data().deepCopy(fields()[16].schema(), other.faRulesetId);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.faStatus)) {
        this.faStatus = data().deepCopy(fields()[17].schema(), other.faStatus);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.fgUuid)) {
        this.fgUuid = data().deepCopy(fields()[18].schema(), other.fgUuid);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.fileId)) {
        this.fileId = data().deepCopy(fields()[19].schema(), other.fileId);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.hoursToDelinquent)) {
        this.hoursToDelinquent = data().deepCopy(fields()[20].schema(), other.hoursToDelinquent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.icUuid)) {
        this.icUuid = data().deepCopy(fields()[21].schema(), other.icUuid);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[22].schema(), other.lastModifiedDate);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.numDocAccepted)) {
        this.numDocAccepted = data().deepCopy(fields()[23].schema(), other.numDocAccepted);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.numDocError)) {
        this.numDocError = data().deepCopy(fields()[24].schema(), other.numDocError);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.numDocReceived)) {
        this.numDocReceived = data().deepCopy(fields()[25].schema(), other.numDocReceived);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.numDocReject)) {
        this.numDocReject = data().deepCopy(fields()[26].schema(), other.numDocReject);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.numOfCycles)) {
        this.numOfCycles = data().deepCopy(fields()[27].schema(), other.numOfCycles);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.numOfDocs)) {
        this.numOfDocs = data().deepCopy(fields()[28].schema(), other.numOfDocs);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.readyToSend)) {
        this.readyToSend = data().deepCopy(fields()[29].schema(), other.readyToSend);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.resolvedAckCodes)) {
        this.resolvedAckCodes = data().deepCopy(fields()[30].schema(), other.resolvedAckCodes);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[31].schema(), other.transactionId);
        fieldSetFlags()[31] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FgFaStatusEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.FgFaStatusEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ackCode)) {
        this.ackCode = data().deepCopy(fields()[0].schema(), other.ackCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ackDate)) {
        this.ackDate = data().deepCopy(fields()[1].schema(), other.ackDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ackDocUuid)) {
        this.ackDocUuid = data().deepCopy(fields()[2].schema(), other.ackDocUuid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.calendarRulesetId)) {
        this.calendarRulesetId = data().deepCopy(fields()[3].schema(), other.calendarRulesetId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cycleExpireDate)) {
        this.cycleExpireDate = data().deepCopy(fields()[5].schema(), other.cycleExpireDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cycleMsg)) {
        this.cycleMsg = data().deepCopy(fields()[6].schema(), other.cycleMsg);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cycleMsgDate)) {
        this.cycleMsgDate = data().deepCopy(fields()[7].schema(), other.cycleMsgDate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cycleMsgNote)) {
        this.cycleMsgNote = data().deepCopy(fields()[8].schema(), other.cycleMsgNote);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cycleNo)) {
        this.cycleNo = data().deepCopy(fields()[9].schema(), other.cycleNo);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dateDelivered)) {
        this.dateDelivered = data().deepCopy(fields()[10].schema(), other.dateDelivered);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.delinquentFlag)) {
        this.delinquentFlag = data().deepCopy(fields()[11].schema(), other.delinquentFlag);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.doNotTrackFlag)) {
        this.doNotTrackFlag = data().deepCopy(fields()[12].schema(), other.doNotTrackFlag);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.eventId)) {
        this.eventId = data().deepCopy(fields()[13].schema(), other.eventId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[14].schema(), other.eventTimestamp);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.faDocTransactionId)) {
        this.faDocTransactionId = data().deepCopy(fields()[15].schema(), other.faDocTransactionId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.faRulesetId)) {
        this.faRulesetId = data().deepCopy(fields()[16].schema(), other.faRulesetId);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.faStatus)) {
        this.faStatus = data().deepCopy(fields()[17].schema(), other.faStatus);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.fgUuid)) {
        this.fgUuid = data().deepCopy(fields()[18].schema(), other.fgUuid);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.fileId)) {
        this.fileId = data().deepCopy(fields()[19].schema(), other.fileId);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.hoursToDelinquent)) {
        this.hoursToDelinquent = data().deepCopy(fields()[20].schema(), other.hoursToDelinquent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.icUuid)) {
        this.icUuid = data().deepCopy(fields()[21].schema(), other.icUuid);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[22].schema(), other.lastModifiedDate);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.numDocAccepted)) {
        this.numDocAccepted = data().deepCopy(fields()[23].schema(), other.numDocAccepted);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.numDocError)) {
        this.numDocError = data().deepCopy(fields()[24].schema(), other.numDocError);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.numDocReceived)) {
        this.numDocReceived = data().deepCopy(fields()[25].schema(), other.numDocReceived);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.numDocReject)) {
        this.numDocReject = data().deepCopy(fields()[26].schema(), other.numDocReject);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.numOfCycles)) {
        this.numOfCycles = data().deepCopy(fields()[27].schema(), other.numOfCycles);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.numOfDocs)) {
        this.numOfDocs = data().deepCopy(fields()[28].schema(), other.numOfDocs);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.readyToSend)) {
        this.readyToSend = data().deepCopy(fields()[29].schema(), other.readyToSend);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.resolvedAckCodes)) {
        this.resolvedAckCodes = data().deepCopy(fields()[30].schema(), other.resolvedAckCodes);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[31].schema(), other.transactionId);
        fieldSetFlags()[31] = true;
      }
    }

    /**
      * Gets the value of the 'ackCode' field.
      * @return The value.
      */
    public java.lang.String getAckCode() {
      return ackCode;
    }

    /**
      * Sets the value of the 'ackCode' field.
      * @param value The value of 'ackCode'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setAckCode(java.lang.String value) {
      validate(fields()[0], value);
      this.ackCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ackCode' field has been set.
      * @return True if the 'ackCode' field has been set, false otherwise.
      */
    public boolean hasAckCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ackCode' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearAckCode() {
      ackCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ackDate' field.
      * @return The value.
      */
    public java.lang.Long getAckDate() {
      return ackDate;
    }

    /**
      * Sets the value of the 'ackDate' field.
      * @param value The value of 'ackDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setAckDate(java.lang.Long value) {
      validate(fields()[1], value);
      this.ackDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ackDate' field has been set.
      * @return True if the 'ackDate' field has been set, false otherwise.
      */
    public boolean hasAckDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ackDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearAckDate() {
      ackDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ackDocUuid' field.
      * @return The value.
      */
    public java.lang.String getAckDocUuid() {
      return ackDocUuid;
    }

    /**
      * Sets the value of the 'ackDocUuid' field.
      * @param value The value of 'ackDocUuid'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setAckDocUuid(java.lang.String value) {
      validate(fields()[2], value);
      this.ackDocUuid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ackDocUuid' field has been set.
      * @return True if the 'ackDocUuid' field has been set, false otherwise.
      */
    public boolean hasAckDocUuid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ackDocUuid' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearAckDocUuid() {
      ackDocUuid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'calendarRulesetId' field.
      * @return The value.
      */
    public java.lang.String getCalendarRulesetId() {
      return calendarRulesetId;
    }

    /**
      * Sets the value of the 'calendarRulesetId' field.
      * @param value The value of 'calendarRulesetId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCalendarRulesetId(java.lang.String value) {
      validate(fields()[3], value);
      this.calendarRulesetId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'calendarRulesetId' field has been set.
      * @return True if the 'calendarRulesetId' field has been set, false otherwise.
      */
    public boolean hasCalendarRulesetId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'calendarRulesetId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCalendarRulesetId() {
      calendarRulesetId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * @return The value.
      */
    public java.lang.Long getCreatedDate() {
      return createdDate;
    }

    /**
      * Sets the value of the 'createdDate' field.
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCreatedDate(java.lang.Long value) {
      validate(fields()[4], value);
      this.createdDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCreatedDate() {
      createdDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleExpireDate' field.
      * @return The value.
      */
    public java.lang.Long getCycleExpireDate() {
      return cycleExpireDate;
    }

    /**
      * Sets the value of the 'cycleExpireDate' field.
      * @param value The value of 'cycleExpireDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCycleExpireDate(java.lang.Long value) {
      validate(fields()[5], value);
      this.cycleExpireDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleExpireDate' field has been set.
      * @return True if the 'cycleExpireDate' field has been set, false otherwise.
      */
    public boolean hasCycleExpireDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cycleExpireDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCycleExpireDate() {
      cycleExpireDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsg' field.
      * @return The value.
      */
    public java.lang.String getCycleMsg() {
      return cycleMsg;
    }

    /**
      * Sets the value of the 'cycleMsg' field.
      * @param value The value of 'cycleMsg'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCycleMsg(java.lang.String value) {
      validate(fields()[6], value);
      this.cycleMsg = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsg' field has been set.
      * @return True if the 'cycleMsg' field has been set, false otherwise.
      */
    public boolean hasCycleMsg() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cycleMsg' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCycleMsg() {
      cycleMsg = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsgDate' field.
      * @return The value.
      */
    public java.lang.Long getCycleMsgDate() {
      return cycleMsgDate;
    }

    /**
      * Sets the value of the 'cycleMsgDate' field.
      * @param value The value of 'cycleMsgDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCycleMsgDate(java.lang.Long value) {
      validate(fields()[7], value);
      this.cycleMsgDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsgDate' field has been set.
      * @return True if the 'cycleMsgDate' field has been set, false otherwise.
      */
    public boolean hasCycleMsgDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cycleMsgDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCycleMsgDate() {
      cycleMsgDate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsgNote' field.
      * @return The value.
      */
    public java.lang.String getCycleMsgNote() {
      return cycleMsgNote;
    }

    /**
      * Sets the value of the 'cycleMsgNote' field.
      * @param value The value of 'cycleMsgNote'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCycleMsgNote(java.lang.String value) {
      validate(fields()[8], value);
      this.cycleMsgNote = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsgNote' field has been set.
      * @return True if the 'cycleMsgNote' field has been set, false otherwise.
      */
    public boolean hasCycleMsgNote() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'cycleMsgNote' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCycleMsgNote() {
      cycleMsgNote = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleNo' field.
      * @return The value.
      */
    public java.lang.Integer getCycleNo() {
      return cycleNo;
    }

    /**
      * Sets the value of the 'cycleNo' field.
      * @param value The value of 'cycleNo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setCycleNo(java.lang.Integer value) {
      validate(fields()[9], value);
      this.cycleNo = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleNo' field has been set.
      * @return True if the 'cycleNo' field has been set, false otherwise.
      */
    public boolean hasCycleNo() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'cycleNo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearCycleNo() {
      cycleNo = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateDelivered' field.
      * @return The value.
      */
    public java.lang.Long getDateDelivered() {
      return dateDelivered;
    }

    /**
      * Sets the value of the 'dateDelivered' field.
      * @param value The value of 'dateDelivered'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setDateDelivered(java.lang.Long value) {
      validate(fields()[10], value);
      this.dateDelivered = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'dateDelivered' field has been set.
      * @return True if the 'dateDelivered' field has been set, false otherwise.
      */
    public boolean hasDateDelivered() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'dateDelivered' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearDateDelivered() {
      dateDelivered = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'delinquentFlag' field.
      * @return The value.
      */
    public java.lang.String getDelinquentFlag() {
      return delinquentFlag;
    }

    /**
      * Sets the value of the 'delinquentFlag' field.
      * @param value The value of 'delinquentFlag'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setDelinquentFlag(java.lang.String value) {
      validate(fields()[11], value);
      this.delinquentFlag = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'delinquentFlag' field has been set.
      * @return True if the 'delinquentFlag' field has been set, false otherwise.
      */
    public boolean hasDelinquentFlag() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'delinquentFlag' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearDelinquentFlag() {
      delinquentFlag = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'doNotTrackFlag' field.
      * @return The value.
      */
    public java.lang.String getDoNotTrackFlag() {
      return doNotTrackFlag;
    }

    /**
      * Sets the value of the 'doNotTrackFlag' field.
      * @param value The value of 'doNotTrackFlag'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setDoNotTrackFlag(java.lang.String value) {
      validate(fields()[12], value);
      this.doNotTrackFlag = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'doNotTrackFlag' field has been set.
      * @return True if the 'doNotTrackFlag' field has been set, false otherwise.
      */
    public boolean hasDoNotTrackFlag() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'doNotTrackFlag' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearDoNotTrackFlag() {
      doNotTrackFlag = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[13], value);
      this.eventId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEventTimestamp() {
      return eventTimestamp;
    }

    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setEventTimestamp(java.lang.Long value) {
      validate(fields()[14], value);
      this.eventTimestamp = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearEventTimestamp() {
      eventTimestamp = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'faDocTransactionId' field.
      * @return The value.
      */
    public java.lang.String getFaDocTransactionId() {
      return faDocTransactionId;
    }

    /**
      * Sets the value of the 'faDocTransactionId' field.
      * @param value The value of 'faDocTransactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setFaDocTransactionId(java.lang.String value) {
      validate(fields()[15], value);
      this.faDocTransactionId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'faDocTransactionId' field has been set.
      * @return True if the 'faDocTransactionId' field has been set, false otherwise.
      */
    public boolean hasFaDocTransactionId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'faDocTransactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearFaDocTransactionId() {
      faDocTransactionId = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'faRulesetId' field.
      * @return The value.
      */
    public java.lang.String getFaRulesetId() {
      return faRulesetId;
    }

    /**
      * Sets the value of the 'faRulesetId' field.
      * @param value The value of 'faRulesetId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setFaRulesetId(java.lang.String value) {
      validate(fields()[16], value);
      this.faRulesetId = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'faRulesetId' field has been set.
      * @return True if the 'faRulesetId' field has been set, false otherwise.
      */
    public boolean hasFaRulesetId() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'faRulesetId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearFaRulesetId() {
      faRulesetId = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'faStatus' field.
      * @return The value.
      */
    public java.lang.String getFaStatus() {
      return faStatus;
    }

    /**
      * Sets the value of the 'faStatus' field.
      * @param value The value of 'faStatus'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setFaStatus(java.lang.String value) {
      validate(fields()[17], value);
      this.faStatus = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'faStatus' field has been set.
      * @return True if the 'faStatus' field has been set, false otherwise.
      */
    public boolean hasFaStatus() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'faStatus' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearFaStatus() {
      faStatus = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'fgUuid' field.
      * @return The value.
      */
    public java.lang.String getFgUuid() {
      return fgUuid;
    }

    /**
      * Sets the value of the 'fgUuid' field.
      * @param value The value of 'fgUuid'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setFgUuid(java.lang.String value) {
      validate(fields()[18], value);
      this.fgUuid = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'fgUuid' field has been set.
      * @return True if the 'fgUuid' field has been set, false otherwise.
      */
    public boolean hasFgUuid() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'fgUuid' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearFgUuid() {
      fgUuid = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileId' field.
      * @return The value.
      */
    public java.lang.String getFileId() {
      return fileId;
    }

    /**
      * Sets the value of the 'fileId' field.
      * @param value The value of 'fileId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setFileId(java.lang.String value) {
      validate(fields()[19], value);
      this.fileId = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'fileId' field has been set.
      * @return True if the 'fileId' field has been set, false otherwise.
      */
    public boolean hasFileId() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'fileId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearFileId() {
      fileId = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'hoursToDelinquent' field.
      * @return The value.
      */
    public java.lang.String getHoursToDelinquent() {
      return hoursToDelinquent;
    }

    /**
      * Sets the value of the 'hoursToDelinquent' field.
      * @param value The value of 'hoursToDelinquent'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setHoursToDelinquent(java.lang.String value) {
      validate(fields()[20], value);
      this.hoursToDelinquent = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'hoursToDelinquent' field has been set.
      * @return True if the 'hoursToDelinquent' field has been set, false otherwise.
      */
    public boolean hasHoursToDelinquent() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'hoursToDelinquent' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearHoursToDelinquent() {
      hoursToDelinquent = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'icUuid' field.
      * @return The value.
      */
    public java.lang.String getIcUuid() {
      return icUuid;
    }

    /**
      * Sets the value of the 'icUuid' field.
      * @param value The value of 'icUuid'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setIcUuid(java.lang.String value) {
      validate(fields()[21], value);
      this.icUuid = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'icUuid' field has been set.
      * @return True if the 'icUuid' field has been set, false otherwise.
      */
    public boolean hasIcUuid() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'icUuid' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearIcUuid() {
      icUuid = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedDate' field.
      * @return The value.
      */
    public java.lang.Long getLastModifiedDate() {
      return lastModifiedDate;
    }

    /**
      * Sets the value of the 'lastModifiedDate' field.
      * @param value The value of 'lastModifiedDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setLastModifiedDate(java.lang.Long value) {
      validate(fields()[22], value);
      this.lastModifiedDate = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedDate' field has been set.
      * @return True if the 'lastModifiedDate' field has been set, false otherwise.
      */
    public boolean hasLastModifiedDate() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'lastModifiedDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearLastModifiedDate() {
      lastModifiedDate = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocAccepted' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocAccepted() {
      return numDocAccepted;
    }

    /**
      * Sets the value of the 'numDocAccepted' field.
      * @param value The value of 'numDocAccepted'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumDocAccepted(java.lang.Integer value) {
      validate(fields()[23], value);
      this.numDocAccepted = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocAccepted' field has been set.
      * @return True if the 'numDocAccepted' field has been set, false otherwise.
      */
    public boolean hasNumDocAccepted() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'numDocAccepted' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumDocAccepted() {
      numDocAccepted = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocError' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocError() {
      return numDocError;
    }

    /**
      * Sets the value of the 'numDocError' field.
      * @param value The value of 'numDocError'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumDocError(java.lang.Integer value) {
      validate(fields()[24], value);
      this.numDocError = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocError' field has been set.
      * @return True if the 'numDocError' field has been set, false otherwise.
      */
    public boolean hasNumDocError() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'numDocError' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumDocError() {
      numDocError = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocReceived' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocReceived() {
      return numDocReceived;
    }

    /**
      * Sets the value of the 'numDocReceived' field.
      * @param value The value of 'numDocReceived'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumDocReceived(java.lang.Integer value) {
      validate(fields()[25], value);
      this.numDocReceived = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocReceived' field has been set.
      * @return True if the 'numDocReceived' field has been set, false otherwise.
      */
    public boolean hasNumDocReceived() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'numDocReceived' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumDocReceived() {
      numDocReceived = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocReject' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocReject() {
      return numDocReject;
    }

    /**
      * Sets the value of the 'numDocReject' field.
      * @param value The value of 'numDocReject'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumDocReject(java.lang.Integer value) {
      validate(fields()[26], value);
      this.numDocReject = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocReject' field has been set.
      * @return True if the 'numDocReject' field has been set, false otherwise.
      */
    public boolean hasNumDocReject() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'numDocReject' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumDocReject() {
      numDocReject = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'numOfCycles' field.
      * @return The value.
      */
    public java.lang.Integer getNumOfCycles() {
      return numOfCycles;
    }

    /**
      * Sets the value of the 'numOfCycles' field.
      * @param value The value of 'numOfCycles'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumOfCycles(java.lang.Integer value) {
      validate(fields()[27], value);
      this.numOfCycles = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'numOfCycles' field has been set.
      * @return True if the 'numOfCycles' field has been set, false otherwise.
      */
    public boolean hasNumOfCycles() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'numOfCycles' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumOfCycles() {
      numOfCycles = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'numOfDocs' field.
      * @return The value.
      */
    public java.lang.Integer getNumOfDocs() {
      return numOfDocs;
    }

    /**
      * Sets the value of the 'numOfDocs' field.
      * @param value The value of 'numOfDocs'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setNumOfDocs(java.lang.Integer value) {
      validate(fields()[28], value);
      this.numOfDocs = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'numOfDocs' field has been set.
      * @return True if the 'numOfDocs' field has been set, false otherwise.
      */
    public boolean hasNumOfDocs() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'numOfDocs' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearNumOfDocs() {
      numOfDocs = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'readyToSend' field.
      * @return The value.
      */
    public java.lang.String getReadyToSend() {
      return readyToSend;
    }

    /**
      * Sets the value of the 'readyToSend' field.
      * @param value The value of 'readyToSend'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setReadyToSend(java.lang.String value) {
      validate(fields()[29], value);
      this.readyToSend = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'readyToSend' field has been set.
      * @return True if the 'readyToSend' field has been set, false otherwise.
      */
    public boolean hasReadyToSend() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'readyToSend' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearReadyToSend() {
      readyToSend = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'resolvedAckCodes' field.
      * @return The value.
      */
    public java.lang.String getResolvedAckCodes() {
      return resolvedAckCodes;
    }

    /**
      * Sets the value of the 'resolvedAckCodes' field.
      * @param value The value of 'resolvedAckCodes'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setResolvedAckCodes(java.lang.String value) {
      validate(fields()[30], value);
      this.resolvedAckCodes = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'resolvedAckCodes' field has been set.
      * @return True if the 'resolvedAckCodes' field has been set, false otherwise.
      */
    public boolean hasResolvedAckCodes() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'resolvedAckCodes' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearResolvedAckCodes() {
      resolvedAckCodes = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder setTransactionId(java.lang.String value) {
      validate(fields()[31], value);
      this.transactionId = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.FgFaStatusEvent.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FgFaStatusEvent build() {
      try {
        FgFaStatusEvent record = new FgFaStatusEvent();
        record.ackCode = fieldSetFlags()[0] ? this.ackCode : (java.lang.String) defaultValue(fields()[0]);
        record.ackDate = fieldSetFlags()[1] ? this.ackDate : (java.lang.Long) defaultValue(fields()[1]);
        record.ackDocUuid = fieldSetFlags()[2] ? this.ackDocUuid : (java.lang.String) defaultValue(fields()[2]);
        record.calendarRulesetId = fieldSetFlags()[3] ? this.calendarRulesetId : (java.lang.String) defaultValue(fields()[3]);
        record.createdDate = fieldSetFlags()[4] ? this.createdDate : (java.lang.Long) defaultValue(fields()[4]);
        record.cycleExpireDate = fieldSetFlags()[5] ? this.cycleExpireDate : (java.lang.Long) defaultValue(fields()[5]);
        record.cycleMsg = fieldSetFlags()[6] ? this.cycleMsg : (java.lang.String) defaultValue(fields()[6]);
        record.cycleMsgDate = fieldSetFlags()[7] ? this.cycleMsgDate : (java.lang.Long) defaultValue(fields()[7]);
        record.cycleMsgNote = fieldSetFlags()[8] ? this.cycleMsgNote : (java.lang.String) defaultValue(fields()[8]);
        record.cycleNo = fieldSetFlags()[9] ? this.cycleNo : (java.lang.Integer) defaultValue(fields()[9]);
        record.dateDelivered = fieldSetFlags()[10] ? this.dateDelivered : (java.lang.Long) defaultValue(fields()[10]);
        record.delinquentFlag = fieldSetFlags()[11] ? this.delinquentFlag : (java.lang.String) defaultValue(fields()[11]);
        record.doNotTrackFlag = fieldSetFlags()[12] ? this.doNotTrackFlag : (java.lang.String) defaultValue(fields()[12]);
        record.eventId = fieldSetFlags()[13] ? this.eventId : (java.lang.String) defaultValue(fields()[13]);
        record.eventTimestamp = fieldSetFlags()[14] ? this.eventTimestamp : (java.lang.Long) defaultValue(fields()[14]);
        record.faDocTransactionId = fieldSetFlags()[15] ? this.faDocTransactionId : (java.lang.String) defaultValue(fields()[15]);
        record.faRulesetId = fieldSetFlags()[16] ? this.faRulesetId : (java.lang.String) defaultValue(fields()[16]);
        record.faStatus = fieldSetFlags()[17] ? this.faStatus : (java.lang.String) defaultValue(fields()[17]);
        record.fgUuid = fieldSetFlags()[18] ? this.fgUuid : (java.lang.String) defaultValue(fields()[18]);
        record.fileId = fieldSetFlags()[19] ? this.fileId : (java.lang.String) defaultValue(fields()[19]);
        record.hoursToDelinquent = fieldSetFlags()[20] ? this.hoursToDelinquent : (java.lang.String) defaultValue(fields()[20]);
        record.icUuid = fieldSetFlags()[21] ? this.icUuid : (java.lang.String) defaultValue(fields()[21]);
        record.lastModifiedDate = fieldSetFlags()[22] ? this.lastModifiedDate : (java.lang.Long) defaultValue(fields()[22]);
        record.numDocAccepted = fieldSetFlags()[23] ? this.numDocAccepted : (java.lang.Integer) defaultValue(fields()[23]);
        record.numDocError = fieldSetFlags()[24] ? this.numDocError : (java.lang.Integer) defaultValue(fields()[24]);
        record.numDocReceived = fieldSetFlags()[25] ? this.numDocReceived : (java.lang.Integer) defaultValue(fields()[25]);
        record.numDocReject = fieldSetFlags()[26] ? this.numDocReject : (java.lang.Integer) defaultValue(fields()[26]);
        record.numOfCycles = fieldSetFlags()[27] ? this.numOfCycles : (java.lang.Integer) defaultValue(fields()[27]);
        record.numOfDocs = fieldSetFlags()[28] ? this.numOfDocs : (java.lang.Integer) defaultValue(fields()[28]);
        record.readyToSend = fieldSetFlags()[29] ? this.readyToSend : (java.lang.String) defaultValue(fields()[29]);
        record.resolvedAckCodes = fieldSetFlags()[30] ? this.resolvedAckCodes : (java.lang.String) defaultValue(fields()[30]);
        record.transactionId = fieldSetFlags()[31] ? this.transactionId : (java.lang.String) defaultValue(fields()[31]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FgFaStatusEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<FgFaStatusEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FgFaStatusEvent>
    READER$ = (org.apache.avro.io.DatumReader<FgFaStatusEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
