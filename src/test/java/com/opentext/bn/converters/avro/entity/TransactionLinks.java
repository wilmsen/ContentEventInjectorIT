/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionLinks extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3617316265669702596L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionLinks\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"documentChangeInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DocumentChangeInfo\",\"fields\":[{\"name\":\"didDocumentChange\",\"type\":\"boolean\"}]}],\"default\":null},{\"name\":\"finalTaskInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FinalTaskInfo\",\"fields\":[{\"name\":\"transactionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionStatus\",\"symbols\":[\"PROCESSING\",\"DELIVERY_IN_PROGRESS\",\"DELIVERY_DISABLED\",\"READY_FOR_PICKUP\",\"BATCHED\",\"DELIVERED\",\"ON_HOLD\",\"DUPLICATED\",\"RECEIVER_ERROR\",\"DELIVERY_ERROR\",\"VALIDATION_ERROR\",\"FAILED\",\"COMPLETED\",\"TERMINATED\"]}}]}],\"default\":null},{\"name\":\"transactionMergeInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TransactionMergeInfo\",\"fields\":[{\"name\":\"mergeTransactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"newTransactionInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"NewTransactionInfo\",\"fields\":[{\"name\":\"parentTransactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"payloadRef\",\"type\":{\"type\":\"record\",\"name\":\"PayloadRef\",\"fields\":[{\"name\":\"payloadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payloadType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}],\"default\":null},{\"name\":\"transactionSplitInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TransactionSplitInfo\",\"fields\":[{\"name\":\"didSplitChildren\",\"type\":\"boolean\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionLinks> ENCODER =
      new BinaryMessageEncoder<TransactionLinks>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionLinks> DECODER =
      new BinaryMessageDecoder<TransactionLinks>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransactionLinks> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransactionLinks> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionLinks>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransactionLinks to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransactionLinks from a ByteBuffer. */
  public static TransactionLinks fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.opentext.bn.converters.avro.entity.DocumentChangeInfo documentChangeInfo;
   private com.opentext.bn.converters.avro.entity.FinalTaskInfo finalTaskInfo;
   private com.opentext.bn.converters.avro.entity.TransactionMergeInfo transactionMergeInfo;
   private com.opentext.bn.converters.avro.entity.NewTransactionInfo newTransactionInfo;
   private com.opentext.bn.converters.avro.entity.TransactionSplitInfo transactionSplitInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionLinks() {}

  /**
   * All-args constructor.
   * @param documentChangeInfo The new value for documentChangeInfo
   * @param finalTaskInfo The new value for finalTaskInfo
   * @param transactionMergeInfo The new value for transactionMergeInfo
   * @param newTransactionInfo The new value for newTransactionInfo
   * @param transactionSplitInfo The new value for transactionSplitInfo
   */
  public TransactionLinks(com.opentext.bn.converters.avro.entity.DocumentChangeInfo documentChangeInfo, com.opentext.bn.converters.avro.entity.FinalTaskInfo finalTaskInfo, com.opentext.bn.converters.avro.entity.TransactionMergeInfo transactionMergeInfo, com.opentext.bn.converters.avro.entity.NewTransactionInfo newTransactionInfo, com.opentext.bn.converters.avro.entity.TransactionSplitInfo transactionSplitInfo) {
    this.documentChangeInfo = documentChangeInfo;
    this.finalTaskInfo = finalTaskInfo;
    this.transactionMergeInfo = transactionMergeInfo;
    this.newTransactionInfo = newTransactionInfo;
    this.transactionSplitInfo = transactionSplitInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return documentChangeInfo;
    case 1: return finalTaskInfo;
    case 2: return transactionMergeInfo;
    case 3: return newTransactionInfo;
    case 4: return transactionSplitInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: documentChangeInfo = (com.opentext.bn.converters.avro.entity.DocumentChangeInfo)value$; break;
    case 1: finalTaskInfo = (com.opentext.bn.converters.avro.entity.FinalTaskInfo)value$; break;
    case 2: transactionMergeInfo = (com.opentext.bn.converters.avro.entity.TransactionMergeInfo)value$; break;
    case 3: newTransactionInfo = (com.opentext.bn.converters.avro.entity.NewTransactionInfo)value$; break;
    case 4: transactionSplitInfo = (com.opentext.bn.converters.avro.entity.TransactionSplitInfo)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'documentChangeInfo' field.
   * @return The value of the 'documentChangeInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.DocumentChangeInfo getDocumentChangeInfo() {
    return documentChangeInfo;
  }


  /**
   * Gets the value of the 'finalTaskInfo' field.
   * @return The value of the 'finalTaskInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.FinalTaskInfo getFinalTaskInfo() {
    return finalTaskInfo;
  }


  /**
   * Gets the value of the 'transactionMergeInfo' field.
   * @return The value of the 'transactionMergeInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.TransactionMergeInfo getTransactionMergeInfo() {
    return transactionMergeInfo;
  }


  /**
   * Gets the value of the 'newTransactionInfo' field.
   * @return The value of the 'newTransactionInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.NewTransactionInfo getNewTransactionInfo() {
    return newTransactionInfo;
  }


  /**
   * Gets the value of the 'transactionSplitInfo' field.
   * @return The value of the 'transactionSplitInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.TransactionSplitInfo getTransactionSplitInfo() {
    return transactionSplitInfo;
  }


  /**
   * Creates a new TransactionLinks RecordBuilder.
   * @return A new TransactionLinks RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionLinks.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.TransactionLinks.Builder();
  }

  /**
   * Creates a new TransactionLinks RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionLinks RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionLinks.Builder newBuilder(com.opentext.bn.converters.avro.entity.TransactionLinks.Builder other) {
    return new com.opentext.bn.converters.avro.entity.TransactionLinks.Builder(other);
  }

  /**
   * Creates a new TransactionLinks RecordBuilder by copying an existing TransactionLinks instance.
   * @param other The existing instance to copy.
   * @return A new TransactionLinks RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionLinks.Builder newBuilder(com.opentext.bn.converters.avro.entity.TransactionLinks other) {
    return new com.opentext.bn.converters.avro.entity.TransactionLinks.Builder(other);
  }

  /**
   * RecordBuilder for TransactionLinks instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionLinks>
    implements org.apache.avro.data.RecordBuilder<TransactionLinks> {

    private com.opentext.bn.converters.avro.entity.DocumentChangeInfo documentChangeInfo;
    private com.opentext.bn.converters.avro.entity.DocumentChangeInfo.Builder documentChangeInfoBuilder;
    private com.opentext.bn.converters.avro.entity.FinalTaskInfo finalTaskInfo;
    private com.opentext.bn.converters.avro.entity.FinalTaskInfo.Builder finalTaskInfoBuilder;
    private com.opentext.bn.converters.avro.entity.TransactionMergeInfo transactionMergeInfo;
    private com.opentext.bn.converters.avro.entity.TransactionMergeInfo.Builder transactionMergeInfoBuilder;
    private com.opentext.bn.converters.avro.entity.NewTransactionInfo newTransactionInfo;
    private com.opentext.bn.converters.avro.entity.NewTransactionInfo.Builder newTransactionInfoBuilder;
    private com.opentext.bn.converters.avro.entity.TransactionSplitInfo transactionSplitInfo;
    private com.opentext.bn.converters.avro.entity.TransactionSplitInfo.Builder transactionSplitInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.TransactionLinks.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.documentChangeInfo)) {
        this.documentChangeInfo = data().deepCopy(fields()[0].schema(), other.documentChangeInfo);
        fieldSetFlags()[0] = true;
      }
      if (other.hasDocumentChangeInfoBuilder()) {
        this.documentChangeInfoBuilder = com.opentext.bn.converters.avro.entity.DocumentChangeInfo.newBuilder(other.getDocumentChangeInfoBuilder());
      }
      if (isValidValue(fields()[1], other.finalTaskInfo)) {
        this.finalTaskInfo = data().deepCopy(fields()[1].schema(), other.finalTaskInfo);
        fieldSetFlags()[1] = true;
      }
      if (other.hasFinalTaskInfoBuilder()) {
        this.finalTaskInfoBuilder = com.opentext.bn.converters.avro.entity.FinalTaskInfo.newBuilder(other.getFinalTaskInfoBuilder());
      }
      if (isValidValue(fields()[2], other.transactionMergeInfo)) {
        this.transactionMergeInfo = data().deepCopy(fields()[2].schema(), other.transactionMergeInfo);
        fieldSetFlags()[2] = true;
      }
      if (other.hasTransactionMergeInfoBuilder()) {
        this.transactionMergeInfoBuilder = com.opentext.bn.converters.avro.entity.TransactionMergeInfo.newBuilder(other.getTransactionMergeInfoBuilder());
      }
      if (isValidValue(fields()[3], other.newTransactionInfo)) {
        this.newTransactionInfo = data().deepCopy(fields()[3].schema(), other.newTransactionInfo);
        fieldSetFlags()[3] = true;
      }
      if (other.hasNewTransactionInfoBuilder()) {
        this.newTransactionInfoBuilder = com.opentext.bn.converters.avro.entity.NewTransactionInfo.newBuilder(other.getNewTransactionInfoBuilder());
      }
      if (isValidValue(fields()[4], other.transactionSplitInfo)) {
        this.transactionSplitInfo = data().deepCopy(fields()[4].schema(), other.transactionSplitInfo);
        fieldSetFlags()[4] = true;
      }
      if (other.hasTransactionSplitInfoBuilder()) {
        this.transactionSplitInfoBuilder = com.opentext.bn.converters.avro.entity.TransactionSplitInfo.newBuilder(other.getTransactionSplitInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionLinks instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.TransactionLinks other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.documentChangeInfo)) {
        this.documentChangeInfo = data().deepCopy(fields()[0].schema(), other.documentChangeInfo);
        fieldSetFlags()[0] = true;
      }
      this.documentChangeInfoBuilder = null;
      if (isValidValue(fields()[1], other.finalTaskInfo)) {
        this.finalTaskInfo = data().deepCopy(fields()[1].schema(), other.finalTaskInfo);
        fieldSetFlags()[1] = true;
      }
      this.finalTaskInfoBuilder = null;
      if (isValidValue(fields()[2], other.transactionMergeInfo)) {
        this.transactionMergeInfo = data().deepCopy(fields()[2].schema(), other.transactionMergeInfo);
        fieldSetFlags()[2] = true;
      }
      this.transactionMergeInfoBuilder = null;
      if (isValidValue(fields()[3], other.newTransactionInfo)) {
        this.newTransactionInfo = data().deepCopy(fields()[3].schema(), other.newTransactionInfo);
        fieldSetFlags()[3] = true;
      }
      this.newTransactionInfoBuilder = null;
      if (isValidValue(fields()[4], other.transactionSplitInfo)) {
        this.transactionSplitInfo = data().deepCopy(fields()[4].schema(), other.transactionSplitInfo);
        fieldSetFlags()[4] = true;
      }
      this.transactionSplitInfoBuilder = null;
    }

    /**
      * Gets the value of the 'documentChangeInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.DocumentChangeInfo getDocumentChangeInfo() {
      return documentChangeInfo;
    }

    /**
      * Sets the value of the 'documentChangeInfo' field.
      * @param value The value of 'documentChangeInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setDocumentChangeInfo(com.opentext.bn.converters.avro.entity.DocumentChangeInfo value) {
      validate(fields()[0], value);
      this.documentChangeInfoBuilder = null;
      this.documentChangeInfo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'documentChangeInfo' field has been set.
      * @return True if the 'documentChangeInfo' field has been set, false otherwise.
      */
    public boolean hasDocumentChangeInfo() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'documentChangeInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.DocumentChangeInfo.Builder getDocumentChangeInfoBuilder() {
      if (documentChangeInfoBuilder == null) {
        if (hasDocumentChangeInfo()) {
          setDocumentChangeInfoBuilder(com.opentext.bn.converters.avro.entity.DocumentChangeInfo.newBuilder(documentChangeInfo));
        } else {
          setDocumentChangeInfoBuilder(com.opentext.bn.converters.avro.entity.DocumentChangeInfo.newBuilder());
        }
      }
      return documentChangeInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'documentChangeInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setDocumentChangeInfoBuilder(com.opentext.bn.converters.avro.entity.DocumentChangeInfo.Builder value) {
      clearDocumentChangeInfo();
      documentChangeInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'documentChangeInfo' field has an active Builder instance
     * @return True if the 'documentChangeInfo' field has an active Builder instance
     */
    public boolean hasDocumentChangeInfoBuilder() {
      return documentChangeInfoBuilder != null;
    }

    /**
      * Clears the value of the 'documentChangeInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder clearDocumentChangeInfo() {
      documentChangeInfo = null;
      documentChangeInfoBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'finalTaskInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.FinalTaskInfo getFinalTaskInfo() {
      return finalTaskInfo;
    }

    /**
      * Sets the value of the 'finalTaskInfo' field.
      * @param value The value of 'finalTaskInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setFinalTaskInfo(com.opentext.bn.converters.avro.entity.FinalTaskInfo value) {
      validate(fields()[1], value);
      this.finalTaskInfoBuilder = null;
      this.finalTaskInfo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'finalTaskInfo' field has been set.
      * @return True if the 'finalTaskInfo' field has been set, false otherwise.
      */
    public boolean hasFinalTaskInfo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'finalTaskInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.FinalTaskInfo.Builder getFinalTaskInfoBuilder() {
      if (finalTaskInfoBuilder == null) {
        if (hasFinalTaskInfo()) {
          setFinalTaskInfoBuilder(com.opentext.bn.converters.avro.entity.FinalTaskInfo.newBuilder(finalTaskInfo));
        } else {
          setFinalTaskInfoBuilder(com.opentext.bn.converters.avro.entity.FinalTaskInfo.newBuilder());
        }
      }
      return finalTaskInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'finalTaskInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setFinalTaskInfoBuilder(com.opentext.bn.converters.avro.entity.FinalTaskInfo.Builder value) {
      clearFinalTaskInfo();
      finalTaskInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'finalTaskInfo' field has an active Builder instance
     * @return True if the 'finalTaskInfo' field has an active Builder instance
     */
    public boolean hasFinalTaskInfoBuilder() {
      return finalTaskInfoBuilder != null;
    }

    /**
      * Clears the value of the 'finalTaskInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder clearFinalTaskInfo() {
      finalTaskInfo = null;
      finalTaskInfoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionMergeInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.TransactionMergeInfo getTransactionMergeInfo() {
      return transactionMergeInfo;
    }

    /**
      * Sets the value of the 'transactionMergeInfo' field.
      * @param value The value of 'transactionMergeInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setTransactionMergeInfo(com.opentext.bn.converters.avro.entity.TransactionMergeInfo value) {
      validate(fields()[2], value);
      this.transactionMergeInfoBuilder = null;
      this.transactionMergeInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionMergeInfo' field has been set.
      * @return True if the 'transactionMergeInfo' field has been set, false otherwise.
      */
    public boolean hasTransactionMergeInfo() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'transactionMergeInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionMergeInfo.Builder getTransactionMergeInfoBuilder() {
      if (transactionMergeInfoBuilder == null) {
        if (hasTransactionMergeInfo()) {
          setTransactionMergeInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionMergeInfo.newBuilder(transactionMergeInfo));
        } else {
          setTransactionMergeInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionMergeInfo.newBuilder());
        }
      }
      return transactionMergeInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'transactionMergeInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setTransactionMergeInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionMergeInfo.Builder value) {
      clearTransactionMergeInfo();
      transactionMergeInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transactionMergeInfo' field has an active Builder instance
     * @return True if the 'transactionMergeInfo' field has an active Builder instance
     */
    public boolean hasTransactionMergeInfoBuilder() {
      return transactionMergeInfoBuilder != null;
    }

    /**
      * Clears the value of the 'transactionMergeInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder clearTransactionMergeInfo() {
      transactionMergeInfo = null;
      transactionMergeInfoBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newTransactionInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.NewTransactionInfo getNewTransactionInfo() {
      return newTransactionInfo;
    }

    /**
      * Sets the value of the 'newTransactionInfo' field.
      * @param value The value of 'newTransactionInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setNewTransactionInfo(com.opentext.bn.converters.avro.entity.NewTransactionInfo value) {
      validate(fields()[3], value);
      this.newTransactionInfoBuilder = null;
      this.newTransactionInfo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newTransactionInfo' field has been set.
      * @return True if the 'newTransactionInfo' field has been set, false otherwise.
      */
    public boolean hasNewTransactionInfo() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'newTransactionInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.NewTransactionInfo.Builder getNewTransactionInfoBuilder() {
      if (newTransactionInfoBuilder == null) {
        if (hasNewTransactionInfo()) {
          setNewTransactionInfoBuilder(com.opentext.bn.converters.avro.entity.NewTransactionInfo.newBuilder(newTransactionInfo));
        } else {
          setNewTransactionInfoBuilder(com.opentext.bn.converters.avro.entity.NewTransactionInfo.newBuilder());
        }
      }
      return newTransactionInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'newTransactionInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setNewTransactionInfoBuilder(com.opentext.bn.converters.avro.entity.NewTransactionInfo.Builder value) {
      clearNewTransactionInfo();
      newTransactionInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'newTransactionInfo' field has an active Builder instance
     * @return True if the 'newTransactionInfo' field has an active Builder instance
     */
    public boolean hasNewTransactionInfoBuilder() {
      return newTransactionInfoBuilder != null;
    }

    /**
      * Clears the value of the 'newTransactionInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder clearNewTransactionInfo() {
      newTransactionInfo = null;
      newTransactionInfoBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionSplitInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.TransactionSplitInfo getTransactionSplitInfo() {
      return transactionSplitInfo;
    }

    /**
      * Sets the value of the 'transactionSplitInfo' field.
      * @param value The value of 'transactionSplitInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setTransactionSplitInfo(com.opentext.bn.converters.avro.entity.TransactionSplitInfo value) {
      validate(fields()[4], value);
      this.transactionSplitInfoBuilder = null;
      this.transactionSplitInfo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionSplitInfo' field has been set.
      * @return True if the 'transactionSplitInfo' field has been set, false otherwise.
      */
    public boolean hasTransactionSplitInfo() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'transactionSplitInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionSplitInfo.Builder getTransactionSplitInfoBuilder() {
      if (transactionSplitInfoBuilder == null) {
        if (hasTransactionSplitInfo()) {
          setTransactionSplitInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionSplitInfo.newBuilder(transactionSplitInfo));
        } else {
          setTransactionSplitInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionSplitInfo.newBuilder());
        }
      }
      return transactionSplitInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'transactionSplitInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder setTransactionSplitInfoBuilder(com.opentext.bn.converters.avro.entity.TransactionSplitInfo.Builder value) {
      clearTransactionSplitInfo();
      transactionSplitInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transactionSplitInfo' field has an active Builder instance
     * @return True if the 'transactionSplitInfo' field has an active Builder instance
     */
    public boolean hasTransactionSplitInfoBuilder() {
      return transactionSplitInfoBuilder != null;
    }

    /**
      * Clears the value of the 'transactionSplitInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionLinks.Builder clearTransactionSplitInfo() {
      transactionSplitInfo = null;
      transactionSplitInfoBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionLinks build() {
      try {
        TransactionLinks record = new TransactionLinks();
        if (documentChangeInfoBuilder != null) {
          record.documentChangeInfo = this.documentChangeInfoBuilder.build();
        } else {
          record.documentChangeInfo = fieldSetFlags()[0] ? this.documentChangeInfo : (com.opentext.bn.converters.avro.entity.DocumentChangeInfo) defaultValue(fields()[0]);
        }
        if (finalTaskInfoBuilder != null) {
          record.finalTaskInfo = this.finalTaskInfoBuilder.build();
        } else {
          record.finalTaskInfo = fieldSetFlags()[1] ? this.finalTaskInfo : (com.opentext.bn.converters.avro.entity.FinalTaskInfo) defaultValue(fields()[1]);
        }
        if (transactionMergeInfoBuilder != null) {
          record.transactionMergeInfo = this.transactionMergeInfoBuilder.build();
        } else {
          record.transactionMergeInfo = fieldSetFlags()[2] ? this.transactionMergeInfo : (com.opentext.bn.converters.avro.entity.TransactionMergeInfo) defaultValue(fields()[2]);
        }
        if (newTransactionInfoBuilder != null) {
          record.newTransactionInfo = this.newTransactionInfoBuilder.build();
        } else {
          record.newTransactionInfo = fieldSetFlags()[3] ? this.newTransactionInfo : (com.opentext.bn.converters.avro.entity.NewTransactionInfo) defaultValue(fields()[3]);
        }
        if (transactionSplitInfoBuilder != null) {
          record.transactionSplitInfo = this.transactionSplitInfoBuilder.build();
        } else {
          record.transactionSplitInfo = fieldSetFlags()[4] ? this.transactionSplitInfo : (com.opentext.bn.converters.avro.entity.TransactionSplitInfo) defaultValue(fields()[4]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionLinks>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionLinks>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionLinks>
    READER$ = (org.apache.avro.io.DatumReader<TransactionLinks>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
