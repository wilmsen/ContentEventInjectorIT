/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DocFaStatusEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3424616144262512807L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DocFaStatusEvent\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"ackCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ackDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"calendarRulesetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdDate\",\"type\":\"long\"},{\"name\":\"cycleExpireDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"cycleMsg\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cycleMsgDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"cycleMsgNote\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cycleNo\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"delinquentFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"doNotTrackFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"faDocTransactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"faRulesetId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"faStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fileId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hoursToDelinquent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lastModifiedDate\",\"type\":\"long\"},{\"name\":\"numDocAccepted\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocError\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"numDocReject\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DocFaStatusEvent> ENCODER =
      new BinaryMessageEncoder<DocFaStatusEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DocFaStatusEvent> DECODER =
      new BinaryMessageDecoder<DocFaStatusEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DocFaStatusEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DocFaStatusEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DocFaStatusEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DocFaStatusEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DocFaStatusEvent from a ByteBuffer. */
  public static DocFaStatusEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String ackCode;
   private java.lang.Long ackDate;
   private java.lang.String calendarRulesetId;
   private long createdDate;
   private java.lang.Long cycleExpireDate;
   private java.lang.String cycleMsg;
   private java.lang.Long cycleMsgDate;
   private java.lang.String cycleMsgNote;
   private java.lang.Integer cycleNo;
   private java.lang.String delinquentFlag;
   private java.lang.String doNotTrackFlag;
   private java.lang.String eventId;
   private java.lang.String faDocTransactionId;
   private java.lang.String faRulesetId;
   private java.lang.String faStatus;
   private java.lang.String fileId;
   private java.lang.Integer hoursToDelinquent;
   private long lastModifiedDate;
   private java.lang.Integer numDocAccepted;
   private java.lang.Integer numDocError;
   private java.lang.Integer numDocReceived;
   private java.lang.Integer numDocReject;
   private java.lang.String transactionId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DocFaStatusEvent() {}

  /**
   * All-args constructor.
   * @param ackCode The new value for ackCode
   * @param ackDate The new value for ackDate
   * @param calendarRulesetId The new value for calendarRulesetId
   * @param createdDate The new value for createdDate
   * @param cycleExpireDate The new value for cycleExpireDate
   * @param cycleMsg The new value for cycleMsg
   * @param cycleMsgDate The new value for cycleMsgDate
   * @param cycleMsgNote The new value for cycleMsgNote
   * @param cycleNo The new value for cycleNo
   * @param delinquentFlag The new value for delinquentFlag
   * @param doNotTrackFlag The new value for doNotTrackFlag
   * @param eventId The new value for eventId
   * @param faDocTransactionId The new value for faDocTransactionId
   * @param faRulesetId The new value for faRulesetId
   * @param faStatus The new value for faStatus
   * @param fileId The new value for fileId
   * @param hoursToDelinquent The new value for hoursToDelinquent
   * @param lastModifiedDate The new value for lastModifiedDate
   * @param numDocAccepted The new value for numDocAccepted
   * @param numDocError The new value for numDocError
   * @param numDocReceived The new value for numDocReceived
   * @param numDocReject The new value for numDocReject
   * @param transactionId The new value for transactionId
   */
  public DocFaStatusEvent(java.lang.String ackCode, java.lang.Long ackDate, java.lang.String calendarRulesetId, java.lang.Long createdDate, java.lang.Long cycleExpireDate, java.lang.String cycleMsg, java.lang.Long cycleMsgDate, java.lang.String cycleMsgNote, java.lang.Integer cycleNo, java.lang.String delinquentFlag, java.lang.String doNotTrackFlag, java.lang.String eventId, java.lang.String faDocTransactionId, java.lang.String faRulesetId, java.lang.String faStatus, java.lang.String fileId, java.lang.Integer hoursToDelinquent, java.lang.Long lastModifiedDate, java.lang.Integer numDocAccepted, java.lang.Integer numDocError, java.lang.Integer numDocReceived, java.lang.Integer numDocReject, java.lang.String transactionId) {
    this.ackCode = ackCode;
    this.ackDate = ackDate;
    this.calendarRulesetId = calendarRulesetId;
    this.createdDate = createdDate;
    this.cycleExpireDate = cycleExpireDate;
    this.cycleMsg = cycleMsg;
    this.cycleMsgDate = cycleMsgDate;
    this.cycleMsgNote = cycleMsgNote;
    this.cycleNo = cycleNo;
    this.delinquentFlag = delinquentFlag;
    this.doNotTrackFlag = doNotTrackFlag;
    this.eventId = eventId;
    this.faDocTransactionId = faDocTransactionId;
    this.faRulesetId = faRulesetId;
    this.faStatus = faStatus;
    this.fileId = fileId;
    this.hoursToDelinquent = hoursToDelinquent;
    this.lastModifiedDate = lastModifiedDate;
    this.numDocAccepted = numDocAccepted;
    this.numDocError = numDocError;
    this.numDocReceived = numDocReceived;
    this.numDocReject = numDocReject;
    this.transactionId = transactionId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ackCode;
    case 1: return ackDate;
    case 2: return calendarRulesetId;
    case 3: return createdDate;
    case 4: return cycleExpireDate;
    case 5: return cycleMsg;
    case 6: return cycleMsgDate;
    case 7: return cycleMsgNote;
    case 8: return cycleNo;
    case 9: return delinquentFlag;
    case 10: return doNotTrackFlag;
    case 11: return eventId;
    case 12: return faDocTransactionId;
    case 13: return faRulesetId;
    case 14: return faStatus;
    case 15: return fileId;
    case 16: return hoursToDelinquent;
    case 17: return lastModifiedDate;
    case 18: return numDocAccepted;
    case 19: return numDocError;
    case 20: return numDocReceived;
    case 21: return numDocReject;
    case 22: return transactionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ackCode = (java.lang.String)value$; break;
    case 1: ackDate = (java.lang.Long)value$; break;
    case 2: calendarRulesetId = (java.lang.String)value$; break;
    case 3: createdDate = (java.lang.Long)value$; break;
    case 4: cycleExpireDate = (java.lang.Long)value$; break;
    case 5: cycleMsg = (java.lang.String)value$; break;
    case 6: cycleMsgDate = (java.lang.Long)value$; break;
    case 7: cycleMsgNote = (java.lang.String)value$; break;
    case 8: cycleNo = (java.lang.Integer)value$; break;
    case 9: delinquentFlag = (java.lang.String)value$; break;
    case 10: doNotTrackFlag = (java.lang.String)value$; break;
    case 11: eventId = (java.lang.String)value$; break;
    case 12: faDocTransactionId = (java.lang.String)value$; break;
    case 13: faRulesetId = (java.lang.String)value$; break;
    case 14: faStatus = (java.lang.String)value$; break;
    case 15: fileId = (java.lang.String)value$; break;
    case 16: hoursToDelinquent = (java.lang.Integer)value$; break;
    case 17: lastModifiedDate = (java.lang.Long)value$; break;
    case 18: numDocAccepted = (java.lang.Integer)value$; break;
    case 19: numDocError = (java.lang.Integer)value$; break;
    case 20: numDocReceived = (java.lang.Integer)value$; break;
    case 21: numDocReject = (java.lang.Integer)value$; break;
    case 22: transactionId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ackCode' field.
   * @return The value of the 'ackCode' field.
   */
  public java.lang.String getAckCode() {
    return ackCode;
  }


  /**
   * Gets the value of the 'ackDate' field.
   * @return The value of the 'ackDate' field.
   */
  public java.lang.Long getAckDate() {
    return ackDate;
  }


  /**
   * Gets the value of the 'calendarRulesetId' field.
   * @return The value of the 'calendarRulesetId' field.
   */
  public java.lang.String getCalendarRulesetId() {
    return calendarRulesetId;
  }


  /**
   * Gets the value of the 'createdDate' field.
   * @return The value of the 'createdDate' field.
   */
  public java.lang.Long getCreatedDate() {
    return createdDate;
  }


  /**
   * Gets the value of the 'cycleExpireDate' field.
   * @return The value of the 'cycleExpireDate' field.
   */
  public java.lang.Long getCycleExpireDate() {
    return cycleExpireDate;
  }


  /**
   * Gets the value of the 'cycleMsg' field.
   * @return The value of the 'cycleMsg' field.
   */
  public java.lang.String getCycleMsg() {
    return cycleMsg;
  }


  /**
   * Gets the value of the 'cycleMsgDate' field.
   * @return The value of the 'cycleMsgDate' field.
   */
  public java.lang.Long getCycleMsgDate() {
    return cycleMsgDate;
  }


  /**
   * Gets the value of the 'cycleMsgNote' field.
   * @return The value of the 'cycleMsgNote' field.
   */
  public java.lang.String getCycleMsgNote() {
    return cycleMsgNote;
  }


  /**
   * Gets the value of the 'cycleNo' field.
   * @return The value of the 'cycleNo' field.
   */
  public java.lang.Integer getCycleNo() {
    return cycleNo;
  }


  /**
   * Gets the value of the 'delinquentFlag' field.
   * @return The value of the 'delinquentFlag' field.
   */
  public java.lang.String getDelinquentFlag() {
    return delinquentFlag;
  }


  /**
   * Gets the value of the 'doNotTrackFlag' field.
   * @return The value of the 'doNotTrackFlag' field.
   */
  public java.lang.String getDoNotTrackFlag() {
    return doNotTrackFlag;
  }


  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'faDocTransactionId' field.
   * @return The value of the 'faDocTransactionId' field.
   */
  public java.lang.String getFaDocTransactionId() {
    return faDocTransactionId;
  }


  /**
   * Gets the value of the 'faRulesetId' field.
   * @return The value of the 'faRulesetId' field.
   */
  public java.lang.String getFaRulesetId() {
    return faRulesetId;
  }


  /**
   * Gets the value of the 'faStatus' field.
   * @return The value of the 'faStatus' field.
   */
  public java.lang.String getFaStatus() {
    return faStatus;
  }


  /**
   * Gets the value of the 'fileId' field.
   * @return The value of the 'fileId' field.
   */
  public java.lang.String getFileId() {
    return fileId;
  }


  /**
   * Gets the value of the 'hoursToDelinquent' field.
   * @return The value of the 'hoursToDelinquent' field.
   */
  public java.lang.Integer getHoursToDelinquent() {
    return hoursToDelinquent;
  }


  /**
   * Gets the value of the 'lastModifiedDate' field.
   * @return The value of the 'lastModifiedDate' field.
   */
  public java.lang.Long getLastModifiedDate() {
    return lastModifiedDate;
  }


  /**
   * Gets the value of the 'numDocAccepted' field.
   * @return The value of the 'numDocAccepted' field.
   */
  public java.lang.Integer getNumDocAccepted() {
    return numDocAccepted;
  }


  /**
   * Gets the value of the 'numDocError' field.
   * @return The value of the 'numDocError' field.
   */
  public java.lang.Integer getNumDocError() {
    return numDocError;
  }


  /**
   * Gets the value of the 'numDocReceived' field.
   * @return The value of the 'numDocReceived' field.
   */
  public java.lang.Integer getNumDocReceived() {
    return numDocReceived;
  }


  /**
   * Gets the value of the 'numDocReject' field.
   * @return The value of the 'numDocReject' field.
   */
  public java.lang.Integer getNumDocReject() {
    return numDocReject;
  }


  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Creates a new DocFaStatusEvent RecordBuilder.
   * @return A new DocFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder();
  }

  /**
   * Creates a new DocFaStatusEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DocFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder other) {
    return new com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder(other);
  }

  /**
   * Creates a new DocFaStatusEvent RecordBuilder by copying an existing DocFaStatusEvent instance.
   * @param other The existing instance to copy.
   * @return A new DocFaStatusEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.DocFaStatusEvent other) {
    return new com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder(other);
  }

  /**
   * RecordBuilder for DocFaStatusEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DocFaStatusEvent>
    implements org.apache.avro.data.RecordBuilder<DocFaStatusEvent> {

    private java.lang.String ackCode;
    private java.lang.Long ackDate;
    private java.lang.String calendarRulesetId;
    private long createdDate;
    private java.lang.Long cycleExpireDate;
    private java.lang.String cycleMsg;
    private java.lang.Long cycleMsgDate;
    private java.lang.String cycleMsgNote;
    private java.lang.Integer cycleNo;
    private java.lang.String delinquentFlag;
    private java.lang.String doNotTrackFlag;
    private java.lang.String eventId;
    private java.lang.String faDocTransactionId;
    private java.lang.String faRulesetId;
    private java.lang.String faStatus;
    private java.lang.String fileId;
    private java.lang.Integer hoursToDelinquent;
    private long lastModifiedDate;
    private java.lang.Integer numDocAccepted;
    private java.lang.Integer numDocError;
    private java.lang.Integer numDocReceived;
    private java.lang.Integer numDocReject;
    private java.lang.String transactionId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ackCode)) {
        this.ackCode = data().deepCopy(fields()[0].schema(), other.ackCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ackDate)) {
        this.ackDate = data().deepCopy(fields()[1].schema(), other.ackDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.calendarRulesetId)) {
        this.calendarRulesetId = data().deepCopy(fields()[2].schema(), other.calendarRulesetId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[3].schema(), other.createdDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cycleExpireDate)) {
        this.cycleExpireDate = data().deepCopy(fields()[4].schema(), other.cycleExpireDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cycleMsg)) {
        this.cycleMsg = data().deepCopy(fields()[5].schema(), other.cycleMsg);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cycleMsgDate)) {
        this.cycleMsgDate = data().deepCopy(fields()[6].schema(), other.cycleMsgDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cycleMsgNote)) {
        this.cycleMsgNote = data().deepCopy(fields()[7].schema(), other.cycleMsgNote);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cycleNo)) {
        this.cycleNo = data().deepCopy(fields()[8].schema(), other.cycleNo);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.delinquentFlag)) {
        this.delinquentFlag = data().deepCopy(fields()[9].schema(), other.delinquentFlag);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.doNotTrackFlag)) {
        this.doNotTrackFlag = data().deepCopy(fields()[10].schema(), other.doNotTrackFlag);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.eventId)) {
        this.eventId = data().deepCopy(fields()[11].schema(), other.eventId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.faDocTransactionId)) {
        this.faDocTransactionId = data().deepCopy(fields()[12].schema(), other.faDocTransactionId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.faRulesetId)) {
        this.faRulesetId = data().deepCopy(fields()[13].schema(), other.faRulesetId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.faStatus)) {
        this.faStatus = data().deepCopy(fields()[14].schema(), other.faStatus);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fileId)) {
        this.fileId = data().deepCopy(fields()[15].schema(), other.fileId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.hoursToDelinquent)) {
        this.hoursToDelinquent = data().deepCopy(fields()[16].schema(), other.hoursToDelinquent);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[17].schema(), other.lastModifiedDate);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.numDocAccepted)) {
        this.numDocAccepted = data().deepCopy(fields()[18].schema(), other.numDocAccepted);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.numDocError)) {
        this.numDocError = data().deepCopy(fields()[19].schema(), other.numDocError);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.numDocReceived)) {
        this.numDocReceived = data().deepCopy(fields()[20].schema(), other.numDocReceived);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.numDocReject)) {
        this.numDocReject = data().deepCopy(fields()[21].schema(), other.numDocReject);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[22].schema(), other.transactionId);
        fieldSetFlags()[22] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DocFaStatusEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.DocFaStatusEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ackCode)) {
        this.ackCode = data().deepCopy(fields()[0].schema(), other.ackCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ackDate)) {
        this.ackDate = data().deepCopy(fields()[1].schema(), other.ackDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.calendarRulesetId)) {
        this.calendarRulesetId = data().deepCopy(fields()[2].schema(), other.calendarRulesetId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[3].schema(), other.createdDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cycleExpireDate)) {
        this.cycleExpireDate = data().deepCopy(fields()[4].schema(), other.cycleExpireDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cycleMsg)) {
        this.cycleMsg = data().deepCopy(fields()[5].schema(), other.cycleMsg);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cycleMsgDate)) {
        this.cycleMsgDate = data().deepCopy(fields()[6].schema(), other.cycleMsgDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cycleMsgNote)) {
        this.cycleMsgNote = data().deepCopy(fields()[7].schema(), other.cycleMsgNote);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cycleNo)) {
        this.cycleNo = data().deepCopy(fields()[8].schema(), other.cycleNo);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.delinquentFlag)) {
        this.delinquentFlag = data().deepCopy(fields()[9].schema(), other.delinquentFlag);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.doNotTrackFlag)) {
        this.doNotTrackFlag = data().deepCopy(fields()[10].schema(), other.doNotTrackFlag);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.eventId)) {
        this.eventId = data().deepCopy(fields()[11].schema(), other.eventId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.faDocTransactionId)) {
        this.faDocTransactionId = data().deepCopy(fields()[12].schema(), other.faDocTransactionId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.faRulesetId)) {
        this.faRulesetId = data().deepCopy(fields()[13].schema(), other.faRulesetId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.faStatus)) {
        this.faStatus = data().deepCopy(fields()[14].schema(), other.faStatus);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fileId)) {
        this.fileId = data().deepCopy(fields()[15].schema(), other.fileId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.hoursToDelinquent)) {
        this.hoursToDelinquent = data().deepCopy(fields()[16].schema(), other.hoursToDelinquent);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[17].schema(), other.lastModifiedDate);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.numDocAccepted)) {
        this.numDocAccepted = data().deepCopy(fields()[18].schema(), other.numDocAccepted);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.numDocError)) {
        this.numDocError = data().deepCopy(fields()[19].schema(), other.numDocError);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.numDocReceived)) {
        this.numDocReceived = data().deepCopy(fields()[20].schema(), other.numDocReceived);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.numDocReject)) {
        this.numDocReject = data().deepCopy(fields()[21].schema(), other.numDocReject);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[22].schema(), other.transactionId);
        fieldSetFlags()[22] = true;
      }
    }

    /**
      * Gets the value of the 'ackCode' field.
      * @return The value.
      */
    public java.lang.String getAckCode() {
      return ackCode;
    }

    /**
      * Sets the value of the 'ackCode' field.
      * @param value The value of 'ackCode'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setAckCode(java.lang.String value) {
      validate(fields()[0], value);
      this.ackCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ackCode' field has been set.
      * @return True if the 'ackCode' field has been set, false otherwise.
      */
    public boolean hasAckCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ackCode' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearAckCode() {
      ackCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ackDate' field.
      * @return The value.
      */
    public java.lang.Long getAckDate() {
      return ackDate;
    }

    /**
      * Sets the value of the 'ackDate' field.
      * @param value The value of 'ackDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setAckDate(java.lang.Long value) {
      validate(fields()[1], value);
      this.ackDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ackDate' field has been set.
      * @return True if the 'ackDate' field has been set, false otherwise.
      */
    public boolean hasAckDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ackDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearAckDate() {
      ackDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'calendarRulesetId' field.
      * @return The value.
      */
    public java.lang.String getCalendarRulesetId() {
      return calendarRulesetId;
    }

    /**
      * Sets the value of the 'calendarRulesetId' field.
      * @param value The value of 'calendarRulesetId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCalendarRulesetId(java.lang.String value) {
      validate(fields()[2], value);
      this.calendarRulesetId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'calendarRulesetId' field has been set.
      * @return True if the 'calendarRulesetId' field has been set, false otherwise.
      */
    public boolean hasCalendarRulesetId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'calendarRulesetId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCalendarRulesetId() {
      calendarRulesetId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * @return The value.
      */
    public java.lang.Long getCreatedDate() {
      return createdDate;
    }

    /**
      * Sets the value of the 'createdDate' field.
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCreatedDate(long value) {
      validate(fields()[3], value);
      this.createdDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCreatedDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleExpireDate' field.
      * @return The value.
      */
    public java.lang.Long getCycleExpireDate() {
      return cycleExpireDate;
    }

    /**
      * Sets the value of the 'cycleExpireDate' field.
      * @param value The value of 'cycleExpireDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCycleExpireDate(java.lang.Long value) {
      validate(fields()[4], value);
      this.cycleExpireDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleExpireDate' field has been set.
      * @return True if the 'cycleExpireDate' field has been set, false otherwise.
      */
    public boolean hasCycleExpireDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cycleExpireDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCycleExpireDate() {
      cycleExpireDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsg' field.
      * @return The value.
      */
    public java.lang.String getCycleMsg() {
      return cycleMsg;
    }

    /**
      * Sets the value of the 'cycleMsg' field.
      * @param value The value of 'cycleMsg'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCycleMsg(java.lang.String value) {
      validate(fields()[5], value);
      this.cycleMsg = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsg' field has been set.
      * @return True if the 'cycleMsg' field has been set, false otherwise.
      */
    public boolean hasCycleMsg() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cycleMsg' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCycleMsg() {
      cycleMsg = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsgDate' field.
      * @return The value.
      */
    public java.lang.Long getCycleMsgDate() {
      return cycleMsgDate;
    }

    /**
      * Sets the value of the 'cycleMsgDate' field.
      * @param value The value of 'cycleMsgDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCycleMsgDate(java.lang.Long value) {
      validate(fields()[6], value);
      this.cycleMsgDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsgDate' field has been set.
      * @return True if the 'cycleMsgDate' field has been set, false otherwise.
      */
    public boolean hasCycleMsgDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cycleMsgDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCycleMsgDate() {
      cycleMsgDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleMsgNote' field.
      * @return The value.
      */
    public java.lang.String getCycleMsgNote() {
      return cycleMsgNote;
    }

    /**
      * Sets the value of the 'cycleMsgNote' field.
      * @param value The value of 'cycleMsgNote'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCycleMsgNote(java.lang.String value) {
      validate(fields()[7], value);
      this.cycleMsgNote = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleMsgNote' field has been set.
      * @return True if the 'cycleMsgNote' field has been set, false otherwise.
      */
    public boolean hasCycleMsgNote() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cycleMsgNote' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCycleMsgNote() {
      cycleMsgNote = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'cycleNo' field.
      * @return The value.
      */
    public java.lang.Integer getCycleNo() {
      return cycleNo;
    }

    /**
      * Sets the value of the 'cycleNo' field.
      * @param value The value of 'cycleNo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setCycleNo(java.lang.Integer value) {
      validate(fields()[8], value);
      this.cycleNo = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'cycleNo' field has been set.
      * @return True if the 'cycleNo' field has been set, false otherwise.
      */
    public boolean hasCycleNo() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'cycleNo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearCycleNo() {
      cycleNo = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'delinquentFlag' field.
      * @return The value.
      */
    public java.lang.String getDelinquentFlag() {
      return delinquentFlag;
    }

    /**
      * Sets the value of the 'delinquentFlag' field.
      * @param value The value of 'delinquentFlag'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setDelinquentFlag(java.lang.String value) {
      validate(fields()[9], value);
      this.delinquentFlag = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'delinquentFlag' field has been set.
      * @return True if the 'delinquentFlag' field has been set, false otherwise.
      */
    public boolean hasDelinquentFlag() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'delinquentFlag' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearDelinquentFlag() {
      delinquentFlag = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'doNotTrackFlag' field.
      * @return The value.
      */
    public java.lang.String getDoNotTrackFlag() {
      return doNotTrackFlag;
    }

    /**
      * Sets the value of the 'doNotTrackFlag' field.
      * @param value The value of 'doNotTrackFlag'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setDoNotTrackFlag(java.lang.String value) {
      validate(fields()[10], value);
      this.doNotTrackFlag = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'doNotTrackFlag' field has been set.
      * @return True if the 'doNotTrackFlag' field has been set, false otherwise.
      */
    public boolean hasDoNotTrackFlag() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'doNotTrackFlag' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearDoNotTrackFlag() {
      doNotTrackFlag = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[11], value);
      this.eventId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'faDocTransactionId' field.
      * @return The value.
      */
    public java.lang.String getFaDocTransactionId() {
      return faDocTransactionId;
    }

    /**
      * Sets the value of the 'faDocTransactionId' field.
      * @param value The value of 'faDocTransactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setFaDocTransactionId(java.lang.String value) {
      validate(fields()[12], value);
      this.faDocTransactionId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'faDocTransactionId' field has been set.
      * @return True if the 'faDocTransactionId' field has been set, false otherwise.
      */
    public boolean hasFaDocTransactionId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'faDocTransactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearFaDocTransactionId() {
      faDocTransactionId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'faRulesetId' field.
      * @return The value.
      */
    public java.lang.String getFaRulesetId() {
      return faRulesetId;
    }

    /**
      * Sets the value of the 'faRulesetId' field.
      * @param value The value of 'faRulesetId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setFaRulesetId(java.lang.String value) {
      validate(fields()[13], value);
      this.faRulesetId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'faRulesetId' field has been set.
      * @return True if the 'faRulesetId' field has been set, false otherwise.
      */
    public boolean hasFaRulesetId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'faRulesetId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearFaRulesetId() {
      faRulesetId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'faStatus' field.
      * @return The value.
      */
    public java.lang.String getFaStatus() {
      return faStatus;
    }

    /**
      * Sets the value of the 'faStatus' field.
      * @param value The value of 'faStatus'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setFaStatus(java.lang.String value) {
      validate(fields()[14], value);
      this.faStatus = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'faStatus' field has been set.
      * @return True if the 'faStatus' field has been set, false otherwise.
      */
    public boolean hasFaStatus() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'faStatus' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearFaStatus() {
      faStatus = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileId' field.
      * @return The value.
      */
    public java.lang.String getFileId() {
      return fileId;
    }

    /**
      * Sets the value of the 'fileId' field.
      * @param value The value of 'fileId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setFileId(java.lang.String value) {
      validate(fields()[15], value);
      this.fileId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'fileId' field has been set.
      * @return True if the 'fileId' field has been set, false otherwise.
      */
    public boolean hasFileId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'fileId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearFileId() {
      fileId = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'hoursToDelinquent' field.
      * @return The value.
      */
    public java.lang.Integer getHoursToDelinquent() {
      return hoursToDelinquent;
    }

    /**
      * Sets the value of the 'hoursToDelinquent' field.
      * @param value The value of 'hoursToDelinquent'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setHoursToDelinquent(java.lang.Integer value) {
      validate(fields()[16], value);
      this.hoursToDelinquent = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'hoursToDelinquent' field has been set.
      * @return True if the 'hoursToDelinquent' field has been set, false otherwise.
      */
    public boolean hasHoursToDelinquent() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'hoursToDelinquent' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearHoursToDelinquent() {
      hoursToDelinquent = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedDate' field.
      * @return The value.
      */
    public java.lang.Long getLastModifiedDate() {
      return lastModifiedDate;
    }

    /**
      * Sets the value of the 'lastModifiedDate' field.
      * @param value The value of 'lastModifiedDate'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setLastModifiedDate(long value) {
      validate(fields()[17], value);
      this.lastModifiedDate = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedDate' field has been set.
      * @return True if the 'lastModifiedDate' field has been set, false otherwise.
      */
    public boolean hasLastModifiedDate() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'lastModifiedDate' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearLastModifiedDate() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocAccepted' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocAccepted() {
      return numDocAccepted;
    }

    /**
      * Sets the value of the 'numDocAccepted' field.
      * @param value The value of 'numDocAccepted'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setNumDocAccepted(java.lang.Integer value) {
      validate(fields()[18], value);
      this.numDocAccepted = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocAccepted' field has been set.
      * @return True if the 'numDocAccepted' field has been set, false otherwise.
      */
    public boolean hasNumDocAccepted() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'numDocAccepted' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearNumDocAccepted() {
      numDocAccepted = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocError' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocError() {
      return numDocError;
    }

    /**
      * Sets the value of the 'numDocError' field.
      * @param value The value of 'numDocError'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setNumDocError(java.lang.Integer value) {
      validate(fields()[19], value);
      this.numDocError = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocError' field has been set.
      * @return True if the 'numDocError' field has been set, false otherwise.
      */
    public boolean hasNumDocError() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'numDocError' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearNumDocError() {
      numDocError = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocReceived' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocReceived() {
      return numDocReceived;
    }

    /**
      * Sets the value of the 'numDocReceived' field.
      * @param value The value of 'numDocReceived'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setNumDocReceived(java.lang.Integer value) {
      validate(fields()[20], value);
      this.numDocReceived = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocReceived' field has been set.
      * @return True if the 'numDocReceived' field has been set, false otherwise.
      */
    public boolean hasNumDocReceived() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'numDocReceived' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearNumDocReceived() {
      numDocReceived = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'numDocReject' field.
      * @return The value.
      */
    public java.lang.Integer getNumDocReject() {
      return numDocReject;
    }

    /**
      * Sets the value of the 'numDocReject' field.
      * @param value The value of 'numDocReject'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setNumDocReject(java.lang.Integer value) {
      validate(fields()[21], value);
      this.numDocReject = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'numDocReject' field has been set.
      * @return True if the 'numDocReject' field has been set, false otherwise.
      */
    public boolean hasNumDocReject() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'numDocReject' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearNumDocReject() {
      numDocReject = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder setTransactionId(java.lang.String value) {
      validate(fields()[22], value);
      this.transactionId = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DocFaStatusEvent.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DocFaStatusEvent build() {
      try {
        DocFaStatusEvent record = new DocFaStatusEvent();
        record.ackCode = fieldSetFlags()[0] ? this.ackCode : (java.lang.String) defaultValue(fields()[0]);
        record.ackDate = fieldSetFlags()[1] ? this.ackDate : (java.lang.Long) defaultValue(fields()[1]);
        record.calendarRulesetId = fieldSetFlags()[2] ? this.calendarRulesetId : (java.lang.String) defaultValue(fields()[2]);
        record.createdDate = fieldSetFlags()[3] ? this.createdDate : (java.lang.Long) defaultValue(fields()[3]);
        record.cycleExpireDate = fieldSetFlags()[4] ? this.cycleExpireDate : (java.lang.Long) defaultValue(fields()[4]);
        record.cycleMsg = fieldSetFlags()[5] ? this.cycleMsg : (java.lang.String) defaultValue(fields()[5]);
        record.cycleMsgDate = fieldSetFlags()[6] ? this.cycleMsgDate : (java.lang.Long) defaultValue(fields()[6]);
        record.cycleMsgNote = fieldSetFlags()[7] ? this.cycleMsgNote : (java.lang.String) defaultValue(fields()[7]);
        record.cycleNo = fieldSetFlags()[8] ? this.cycleNo : (java.lang.Integer) defaultValue(fields()[8]);
        record.delinquentFlag = fieldSetFlags()[9] ? this.delinquentFlag : (java.lang.String) defaultValue(fields()[9]);
        record.doNotTrackFlag = fieldSetFlags()[10] ? this.doNotTrackFlag : (java.lang.String) defaultValue(fields()[10]);
        record.eventId = fieldSetFlags()[11] ? this.eventId : (java.lang.String) defaultValue(fields()[11]);
        record.faDocTransactionId = fieldSetFlags()[12] ? this.faDocTransactionId : (java.lang.String) defaultValue(fields()[12]);
        record.faRulesetId = fieldSetFlags()[13] ? this.faRulesetId : (java.lang.String) defaultValue(fields()[13]);
        record.faStatus = fieldSetFlags()[14] ? this.faStatus : (java.lang.String) defaultValue(fields()[14]);
        record.fileId = fieldSetFlags()[15] ? this.fileId : (java.lang.String) defaultValue(fields()[15]);
        record.hoursToDelinquent = fieldSetFlags()[16] ? this.hoursToDelinquent : (java.lang.Integer) defaultValue(fields()[16]);
        record.lastModifiedDate = fieldSetFlags()[17] ? this.lastModifiedDate : (java.lang.Long) defaultValue(fields()[17]);
        record.numDocAccepted = fieldSetFlags()[18] ? this.numDocAccepted : (java.lang.Integer) defaultValue(fields()[18]);
        record.numDocError = fieldSetFlags()[19] ? this.numDocError : (java.lang.Integer) defaultValue(fields()[19]);
        record.numDocReceived = fieldSetFlags()[20] ? this.numDocReceived : (java.lang.Integer) defaultValue(fields()[20]);
        record.numDocReject = fieldSetFlags()[21] ? this.numDocReject : (java.lang.Integer) defaultValue(fields()[21]);
        record.transactionId = fieldSetFlags()[22] ? this.transactionId : (java.lang.String) defaultValue(fields()[22]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DocFaStatusEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<DocFaStatusEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DocFaStatusEvent>
    READER$ = (org.apache.avro.io.DatumReader<DocFaStatusEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
